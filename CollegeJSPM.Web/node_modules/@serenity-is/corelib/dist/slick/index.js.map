{
  "version": 3,
  "sources": ["../../src/slick/aggregators.ts", "../../src/slick/remoteview.ts"],
  "sourcesContent": ["\uFEFFimport { escape, Column, GroupTotals, NonDataRow, convertCompatFormatter } from \"@serenity-is/sleekgrid\";\nimport { formatNumber, htmlEncode, tryGetText } from \"@serenity-is/corelib/q\";\n\nexport {}\n\nexport namespace Aggregators\n{\n    export function Avg(field: string): void {\n        this.field_ = field;\n        this.type_ = \"Avg\";\n\n        this.init = function () {\n            this.count_ = 0;\n            this.nonNullCount_ = 0;\n            this.sum_ = 0;\n        };\n\n        this.accumulate = function (item: any) {\n            var val = item[this.field_];\n            this.count_++;\n            if (val != null && val !== \"\" && !isNaN(val)) {\n                this.nonNullCount_++;\n                this.sum_ += parseFloat(val);\n            }\n        };\n\n        this.storeResult = function (groupTotals: any) {\n            if (!groupTotals.avg) {\n                groupTotals.avg = {};\n            }\n            if (this.nonNullCount_ != 0) {\n                groupTotals.avg[this.field_] = this.sum_ / this.nonNullCount_;\n            }\n        };\n    }\n\n    export function WeightedAvg(field: string, weightedField: string) {\n        this.field_ = field;\n        this.type_ = \"WeightedAvg\";\n        this.weightedField_ = weightedField;\n\n        this.init = function () {\n            this.sum_ = 0;\n            this.weightedSum_ = 0;\n        };\n\n        this.accumulate = function (item: any) {\n            var val = item[this.field_];\n            var valWeighted = item[this.weightedField_];\n            if (this.isValid(val) && this.isValid(valWeighted)) {\n                this.weightedSum_ += parseFloat(valWeighted);\n                this.sum_ += parseFloat(val) * parseFloat(valWeighted);\n            }\n        };\n\n        this.storeResult = function (groupTotals: any) {\n            if (!groupTotals.avg) {\n                groupTotals.avg = {};\n            }\n\n            if (this.sum_ && this.weightedSum_) {\n                groupTotals.avg[this.field_] = this.sum_ / this.weightedSum_;\n            }\n        };\n\n        this.isValid = function (val: any) {\n            return val !== null && val !== \"\" && !isNaN(val);\n        };\n    }\n\n    export function Min(field: string): void {\n        this.field_ = field;\n        this.type_ = \"Min\";\n\n        this.init = function () {\n            this.min_ = null;\n        };\n\n        this.accumulate = function (item: any) {\n            var val = item[this.field_];\n            if (val != null && val !== \"\" && !isNaN(val)) {\n                if (this.min_ == null || val < this.min_) {\n                    this.min_ = val;\n                }\n            }\n        };\n\n        this.storeResult = function (groupTotals: any) {\n            if (!groupTotals.min) {\n                groupTotals.min = {};\n            }\n            groupTotals.min[this.field_] = this.min_;\n        }\n    }\n\n    export function Max(field: string): void {\n        this.field_ = field;\n        this.type_ = \"Max\";\n\n        this.init = function () {\n            this.max_ = null;\n        };\n\n        this.accumulate = function (item: any) {\n            var val = item[this.field_];\n            if (val != null && val !== \"\" && !isNaN(val)) {\n                if (this.max_ == null || val > this.max_) {\n                    this.max_ = val;\n                }\n            }\n        };\n\n        this.storeResult = function (groupTotals: any) {\n            if (!groupTotals.max) {\n                groupTotals.max = {};\n            }\n            groupTotals.max[this.field_] = this.max_;\n        }\n    }\n\n    export function Sum(field: string): void {\n        this.field_ = field;\n        this.type_ = \"Sum\";\n\n        this.init = function () {\n            this.sum_ = null;\n        };\n\n        this.accumulate = function (item: any) {\n            var val = item[this.field_];\n            if (val != null && val !== \"\" && !isNaN(val)) {\n                this.sum_ += parseFloat(val);\n            }\n        };\n\n        this.storeResult = function (groupTotals: any) {\n            if (!groupTotals.sum) {\n                groupTotals.sum = {};\n            }\n            groupTotals.sum[this.field_] = this.sum_;\n        }\n    }\n}\n\nexport namespace AggregateFormatting {\n    export function formatMarkup<TItem = any>(totals: GroupTotals, column: Column<TItem>, aggType: string): string {\n        var textKey = (aggType.substring(0, 1).toUpperCase() + aggType.substring(1));\n        var text = tryGetText(\"Enums.Serenity.SummaryType.\" + textKey) ?? textKey;\n    \n        var value = (totals as any)[aggType][column.field];\n        var formattedValue = formatValue(column, value);\n    \n        return \"<span class='aggregate agg-\" + aggType + \"'  title='\" + htmlEncode(text) + \"'>\" +\n            formattedValue +\n            \"</span>\";\n    }\n\n    export function formatValue(column: Column, value: number): string {\n\n        var formatter = column.format ?? (column.formatter ? convertCompatFormatter(column.formatter) : null);\n\n        if (formatter != null) {\n            var item = new NonDataRow();\n            (item as any)[column.field] = value;\n            try {\n                return formatter({ column, escape, item, value });\n            }\n            catch (e) {\n            }\n        }\n\n        if (typeof value === \"number\") {\n            var displayFormat = column.sourceItem?.displayFormat ?? \"#,##0.##\";\n            return htmlEncode(formatNumber(value, displayFormat));\n        }\n        else\n            return htmlEncode(value);\n    }\n\n    export function groupTotalsFormatter<TItem = any>(totals: GroupTotals, column: Column<TItem>): string {\n        if (!totals || !column)\n            return \"\";\n    \n        var text: string = null;\n    \n        [\"sum\", \"avg\", \"min\", \"max\", \"cnt\"].forEach(function (aggType) {\n            if (text == null && (totals as any)[aggType] && (totals as any)[aggType][column.field] != null) {\n                text = formatMarkup(totals, column, aggType);\n                return false;\n            }\n        });\n    \n        return text || \"\";\n    }       \n}", "\uFEFFimport { deepClone, extend, htmlEncode, ListRequest, ListResponse, notifyError, ServiceResponse, localText } from \"@serenity-is/corelib/q\";\nimport { EventEmitter, EventData, Grid, gridDefaults, Group, GroupItemMetadataProvider, GroupTotals } from \"@serenity-is/sleekgrid\";\nimport { AggregateFormatting } from \"./aggregators\";\nimport { GroupInfo, PagingOptions, SummaryOptions } from \"./slicktypes\";\n\nexport interface RemoteViewOptions {\n    autoLoad?: boolean;\n    idField?: string;\n    contentType?: string;\n    dataType?: string;\n    filter?: any;\n    params?: any;\n    onSubmit?: CancellableViewCallback<any>;\n    url?: string;\n    localSort?: boolean;\n    sortBy?: any;\n    rowsPerPage?: number;\n    seekToPage?: number;\n    onProcessData?: RemoteViewProcessCallback<any>;\n    method?: string;\n    inlineFilters?: boolean;\n    groupItemMetadataProvider?: GroupItemMetadataProvider;\n    onAjaxCall?: RemoteViewAjaxCallback<any>;\n    getItemMetadata?: (p1?: any, p2?: number) => any;\n    errorMsg?: string;\n}\n    \nexport interface PagingInfo {\n    rowsPerPage: number;\n    page: number,\n    totalCount: number;\n    loading: boolean,\n    error: string;\n    dataView: RemoteView<any>\n}\n\nexport type CancellableViewCallback<TEntity> = (view: RemoteView<TEntity>) => boolean | void;\nexport type RemoteViewAjaxCallback<TEntity> = (view: RemoteView<TEntity>, options: JQueryAjaxSettings) => boolean | void;\nexport type RemoteViewFilter<TEntity> = (item: TEntity, view: RemoteView<TEntity>) => boolean;\nexport type RemoteViewProcessCallback<TEntity> = (data: ListResponse<TEntity>, view: RemoteView<TEntity>) => ListResponse<TEntity>;\n\nexport interface RemoteView<TEntity> {\n    onSubmit: CancellableViewCallback<TEntity>;\n    onDataChanged: EventEmitter;\n    onDataLoading: EventEmitter;\n    onDataLoaded: EventEmitter;\n    onPagingInfoChanged: EventEmitter;\n    onRowCountChanged: EventEmitter;\n    onRowsChanged: EventEmitter;\n    onRowsOrCountChanged: EventEmitter;\n    getPagingInfo(): PagingInfo;\n    onGroupExpanded: EventEmitter,\n    onGroupCollapsed: EventEmitter,\n    onAjaxCall: RemoteViewAjaxCallback<TEntity>;\n    onProcessData: RemoteViewProcessCallback<TEntity>;\n    addData(data: ListResponse<TEntity>): void;\n    beginUpdate(): void;\n    endUpdate(): void;\n    deleteItem(id: any): void;\n    getItems(): TEntity[];\n    setFilter(filter: RemoteViewFilter<TEntity>): void;\n    getFilter(): RemoteViewFilter<TEntity>;\n    getFilteredItems(): any;\n    getGroupItemMetadataProvider(): GroupItemMetadataProvider;\n    setGroupItemMetadataProvider(value: GroupItemMetadataProvider): void;\n    fastSort: any;\n    setItems(items: any[], newIdProperty?: boolean | string): void;\n    getIdPropertyName(): string;\n    getItemById(id: any): TEntity;\n    getGrandTotals(): any;\n    getGrouping(): GroupInfo<TEntity>[];\n    getGroups(): any[];\n    getRowById(id: any): number;\n    getRowByItem(item: any): number;\n    getRows(): any[];\n    mapItemsToRows(itemArray: any[]): any[];\n    mapRowsToIds(rowArray: number[]): any[];\n    mapIdsToRows(idAray: any[]): number[];\n    setFilterArgs(args: any): void;\n    setRefreshHints(hints: any[]): void;\n    insertItem(insertBefore: number, item: any): void;\n    sortedAddItem(item: any): void;\n    sortedUpdateItem(id: any, item: any): void;\n    syncGridSelection(grid: any, preserveHidden?: boolean, preserveHiddenOnSelectionChange?: boolean): void;\n    syncGridCellCssStyles(grid: any, key: string): void;\n    getItemMetadata(i: number): any;\n    updateItem(id: any, item: TEntity): void;\n    addItem(item: TEntity): void;\n    getIdxById(id: any): any;\n    getItemByIdx(index: number): any;\n    setGrouping(groupInfo: GroupInfo<TEntity>[]): void;\n    collapseAllGroups(level: number): void;\n    expandAllGroups(level: number): void;\n    expandGroup(keys: any[]): void;\n    collapseGroup(keys: any[]): void;\n    setSummaryOptions(options: SummaryOptions): void;\n    setPagingOptions(options: PagingOptions): void;\n    refresh(): void;\n    populate(): void;\n    populateLock(): void;\n    populateUnlock(): void;\n    getItem(row: number): any;\n    getLength(): number;\n    rowsPerPage: number;\n    errormsg: string;\n    params: any;\n    getLocalSort(): boolean;\n    setLocalSort(value: boolean): void;\n    sort(comparer?: (a: any, b: any) => number, ascending?: boolean): void;\n    reSort(): void;\n    sortBy: string[];\n    url: string;\n    method: string;\n    idField: string;\n    seekToPage?: number;\n}\n\nexport class RemoteView<TEntity> {\n    constructor(options: RemoteViewOptions) {\n        var self = this;\n\n        if (gridDefaults != null && gridDefaults.groupTotalsFormatter === void 0)\n            gridDefaults.groupTotalsFormatter = AggregateFormatting.groupTotalsFormatter;\n        \n        var idProperty: string;\n        var items: any[] = [];\n        var rows: any[] = [];\n        var idxById: Record<any, number> = {};\n        var rowsById: any = null;\n        var filter: any = null;\n        var updated: any = null;\n        var suspend = 0;\n\n        var sortAsc = true;\n        var fastSortField: string;\n        var sortComparer: any;\n        var refreshHints: any = {};\n        var prevRefreshHints: any = {};\n        var filterArgs: any;\n        var filteredItems: any = [];\n        var compiledFilter: any;\n        var compiledFilterWithCaching: any;\n        var filterCache: any[] = [];\n\n        var groupingInfoDefaults = {\n            getter: <any>null,\n            formatter: <any>null,\n            comparer: function (a: any, b: any) {\n                return (a.value === b.value ? 0 :\n                    (a.value > b.value ? 1 : -1)\n                );\n            },\n            predefinedValues: <any[]>[],\n            aggregateEmpty: false,\n            aggregateCollapsed: false,\n            aggregateChildGroups: false,\n            collapsed: false,\n            displayTotalsRow: true,\n            lazyTotalsCalculation: false\n        };\n        var summaryOptions: any = {};\n        var groupingInfos: any[] = [];\n        var groups: any[] = [];\n        var toggledGroupsByLevel: any[] = [];\n        var groupingDelimiter = ':|:';\n\n        var page = 1;\n        var totalRows = 0;\n\n        var onDataChanged: EventEmitter = new EventEmitter();\n        var onDataLoading: EventEmitter = new EventEmitter();\n        var onDataLoaded: EventEmitter = new EventEmitter();\n        var onGroupExpanded: EventEmitter = new EventEmitter();\n        var onGroupCollapsed: EventEmitter = new EventEmitter();\n        var onPagingInfoChanged: EventEmitter = new EventEmitter();\n        var onRowCountChanged: EventEmitter = new EventEmitter();\n        var onRowsChanged: EventEmitter = new EventEmitter();\n        var onRowsOrCountChanged: EventEmitter = new EventEmitter();\n\n        var loading: any = false;\n        var errorMessage: string = null;\n        var populateLocks = 0;\n        var populateCalls = 0;\n        var contentType: string;\n        var dataType: string;\n        var totalCount: number = null;\n        var groupItemMetadataProvider = options.groupItemMetadataProvider;\n        var localSort: boolean = options.localSort ?? false;\n\n        var intf: RemoteView<TEntity>;\n\n        function beginUpdate() {\n            suspend++;\n        }\n\n        function endUpdate() {\n            suspend--;\n            if (suspend <= 0)\n                refresh();\n        }\n\n        function setRefreshHints(hints: any) {\n            refreshHints = hints;\n        }\n\n        function setFilterArgs(args: any) {\n            filterArgs = args;\n        }\n\n        function updateIdxById(startingIndex?: number) {\n            startingIndex = startingIndex || 0;\n            var id: any;\n            for (var i = startingIndex, l = items.length; i < l; i++) {\n                id = items[i][idProperty];\n                if (id === undefined) {\n                    var msg = \"Each data element must implement a unique '\" +\n                        idProperty + \"' property. Object at index '\" + i + \"' \" +\n                        \"has no identity value: \";\n\n                    msg += (<any>$).toJSON(items[i]);\n                    throw msg;\n                }\n                idxById[id] = i;\n            }\n        }\n\n        function ensureIdUniqueness() {\n            var id: any;\n            for (var i = 0, l = items.length; i < l; i++) {\n                id = items[i][idProperty];\n                if (id === undefined || idxById[id] !== i) {\n                    var msg = \"Each data element must implement a unique '\" +\n                        idProperty + \"' property. Object at index '\" + i + \"' \";\n\n                    if (id == undefined)\n                        msg += \"has no identity value: \";\n                    else\n                        msg += \"has repeated identity value '\" + id + \"': \";\n\n                    msg += (<any>$).toJSON(items[i]);\n                    throw msg;\n                }\n            }\n        }\n\n        function getItems() {\n            return items;\n        }\n\n        function getIdPropertyName() {\n            return idProperty;\n        }\n\n        function setItems(data: any[], newIdProperty?: string | boolean) {\n            if (newIdProperty != null && typeof newIdProperty == \"string\")\n                idProperty = newIdProperty;\n\n            items = filteredItems = data;\n            if (localSort) {\n                items.sort(getSortComparer());\n            }\n\n            idxById = {};\n            rowsById = null;\n            summaryOptions.totals = {};\n            updateIdxById();\n            ensureIdUniqueness();\n\n            if (suspend) {\n                recalc(items);\n            }\n            else {\n                refresh();\n            }\n\n            onDataChanged.notify({ dataView: self }, null, self);\n        }\n\n        function setPagingOptions(args: any) {\n            var anyChange = false;\n\n            if (args.rowsPerPage != undefined &&\n                intf.rowsPerPage != args.rowsPerPage) {\n                intf.rowsPerPage = args.rowsPerPage;\n                anyChange = true;\n            }\n\n            if (args.page != undefined) {\n                var newPage: number;\n                if (!intf.rowsPerPage)\n                    newPage = 1;\n                else if (totalCount == null)\n                    newPage = args.page;\n                else\n                    newPage = Math.min(args.page, Math.ceil(totalCount / intf.rowsPerPage) + 1);\n\n                if (newPage < 1)\n                    newPage = 1;\n\n                if (newPage != page) {\n                    intf.seekToPage = newPage;\n                    anyChange = true;\n                }\n            }\n\n            if (anyChange)\n                populate();\n        }\n\n        function getPagingInfo(): PagingInfo {\n            return {\n                rowsPerPage: intf.rowsPerPage,\n                page: page,\n                totalCount: totalCount,\n                loading: loading,\n                error: errorMessage,\n                dataView: intf\n            };\n        }\n\n        function getSortComparer() {\n            if (sortComparer != null)\n                return sortComparer;\n\n            var cols: string[] = [];\n            var asc: boolean[] = [];\n            var sorts = intf.sortBy || [];\n            for (var s of sorts) {\n                if (s == null)\n                    continue;\n                if (s.length > 5 && s.toLowerCase().substr(s.length - 5).toLowerCase() == ' desc') {\n                    asc.push(false);\n                    cols.push(s.substr(0, s.length - 5));\n                }\n                else {\n                    asc.push(true);\n                    cols.push(s);\n                }\n            }\n            return function (a: any, b: any) {\n                for (var i = 0, l = cols.length; i < l; i++) {\n                    var field = cols[i];\n                    var sign = asc[i] ? 1 : -1;\n                    var value1 = a[field], value2 = b[field];\n                    var result = (value1 == value2 ? 0 : (value1 > value2 ? 1 : -1)) * sign;\n                    if (result != 0) {\n                        return result;\n                    }\n                }\n                return 0;\n            }\n        }\n\n        function sort(comparer?: (a: any, b: any) => number, ascending?: boolean) {\n            sortAsc = ascending;\n            fastSortField = null;\n            if (ascending === false) {\n                items.reverse();\n            }\n\n            sortComparer = comparer;\n            items.sort(getSortComparer());\n\n            if (ascending === false) {\n                items.reverse();\n            }\n            idxById = {};\n            updateIdxById();\n            refresh();\n        }\n\n        function getLocalSort(): boolean {\n            return localSort;\n        }\n\n        function setLocalSort(value: boolean) {\n            if (localSort != value) {\n                localSort = value;\n                sort();\n            }\n        }\n\n        /***\n         * Provides a workaround for the extremely slow sorting in IE.\n         * Does a [lexicographic] sort on a give column by temporarily overriding Object.prototype.toString\n         * to return the value of that field and then doing a native Array.sort().\n         */\n        function fastSort(field: any, ascending: boolean) {\n            sortAsc = ascending;\n            fastSortField = field;\n            sortComparer = null;\n            var oldToString = Object.prototype.toString;\n            Object.prototype.toString = (typeof field === \"function\") ? field : function () {\n                return this[field]\n            };\n            // an extra reversal for descending sort keeps the sort stable\n            // (assuming a stable native sort implementation, which isn't true in some cases)\n            if (ascending === false) {\n                items.reverse();\n            }\n            items.sort();\n            Object.prototype.toString = oldToString;\n            if (ascending === false) {\n                items.reverse();\n            }\n            idxById = {};\n            updateIdxById();\n            refresh();\n        }\n\n        function reSort() {\n            if (fastSortField)\n                fastSort(fastSortField, sortAsc);\n            else\n                sort(sortComparer, sortAsc);\n        }\n\n        function getFilteredItems() {\n            return filteredItems;\n        }\n\n        function getFilter() {\n            return filter;\n        }\n\n        function setFilter(filterFn: any) {\n            filter = filterFn;\n            if (options.inlineFilters) {\n                compiledFilter = compileFilter();\n                compiledFilterWithCaching = compileFilterWithCaching();\n            }\n            refresh();\n        }\n\n        function getGrouping() {\n            return groupingInfos;\n        }\n\n        function setSummaryOptions(summary: any) {\n            summary = summary || {};\n            summaryOptions.aggregators = summary.aggregators || [];\n            summaryOptions.compiledAccumulators = [];\n            summaryOptions.totals = {};\n            var idx = summaryOptions.aggregators.length;\n            while (idx--) {\n                summaryOptions.compiledAccumulators[idx] = compileAccumulatorLoop(summaryOptions.aggregators[idx]);\n            }\n            setGrouping(groupingInfos || []);\n        }\n\n        function getGrandTotals() {\n            summaryOptions.totals = summaryOptions.totals || {};\n\n            if (!summaryOptions.totals.initialized) {\n                summaryOptions.aggregators = summaryOptions.aggregators || [];\n                summaryOptions.compiledAccumulators = summaryOptions.compiledAccumulators || [];\n                var agg: any, idx = summaryOptions.aggregators.length;\n\n                while (idx--) {\n                    agg = summaryOptions.aggregators[idx];\n                    agg.init();\n                    summaryOptions.compiledAccumulators[idx].call(agg, items);\n                    agg.storeResult(summaryOptions.totals);\n                }\n                summaryOptions.totals.initialized = true;\n            }\n\n            return summaryOptions.totals;\n        }\n\n        function setGrouping(groupingInfo: any) {\n            if (!groupItemMetadataProvider) {\n                groupItemMetadataProvider = new GroupItemMetadataProvider();\n            }\n\n            groups = [];\n            toggledGroupsByLevel = [];\n            groupingInfo = groupingInfo || [];\n            groupingInfos = (groupingInfo instanceof Array) ? groupingInfo : [groupingInfo];\n\n            for (var i = 0; i < groupingInfos.length; i++) {\n                var gi = groupingInfos[i] = extend(extend<any>({}, groupingInfoDefaults), deepClone(groupingInfos[i]));\n                gi.aggregators = gi.aggregators || summaryOptions.aggregators || [];\n                gi.getterIsAFn = typeof gi.getter === \"function\";\n\n                // pre-compile accumulator loops\n                gi.compiledAccumulators = [];\n                var idx = gi.aggregators.length;\n                while (idx--) {\n                    gi.compiledAccumulators[idx] = compileAccumulatorLoop(gi.aggregators[idx]);\n                }\n\n                toggledGroupsByLevel[i] = {};\n            }\n\n            refresh();\n        }\n\n        function getItemByIdx(i: number) {\n            return items[i];\n        }\n\n        function getIdxById(id: any) {\n            return idxById[id];\n        }\n\n        function ensureRowsByIdCache() {\n            if (!rowsById) {\n                rowsById = {};\n                for (var i = 0, l = rows.length; i < l; i++) {\n                    rowsById[rows[i][idProperty]] = i;\n                }\n            }\n        }\n\n        function getRowByItem(item: any) {\n            ensureRowsByIdCache();\n            return rowsById[item[idProperty]];\n        }\n\n        function getRowById(id: any) {\n            ensureRowsByIdCache();\n            return rowsById[id];\n        }\n\n        function getItemById(id: any) {\n            return items[idxById[id]];\n        }\n\n        function mapItemsToRows(itemArray: any[]) {\n            var rows = [];\n            ensureRowsByIdCache();\n            for (var i = 0, l = itemArray.length; i < l; i++) {\n                var row = rowsById[itemArray[i][idProperty]];\n                if (row != null) {\n                    rows[rows.length] = row;\n                }\n            }\n            return rows;\n        }\n\n        function mapIdsToRows(idArray: any[]) {\n            var rows: any[] = [];\n            ensureRowsByIdCache();\n            for (var i = 0, l = idArray.length; i < l; i++) {\n                var row = rowsById[idArray[i]];\n                if (row != null) {\n                    rows[rows.length] = row;\n                }\n            }\n            return rows;\n        }\n\n        function mapRowsToIds(rowArray: any[]) {\n            var ids: any[] = [];\n            for (var i = 0, l = rowArray.length; i < l; i++) {\n                if (rowArray[i] < rows.length) {\n                    ids[ids.length] = rows[rowArray[i]][idProperty];\n                }\n            }\n            return ids;\n        }\n\n        function updateItem(id: any, item: any) {\n            if (idxById[id] === undefined) {\n                throw new Error(\"Invalid id\");\n            }\n\n            if (id !== item[idProperty]) {\n                // make sure the new id is unique:\n                var newId = item[idProperty];\n                if (newId == null) {\n                    throw new Error(\"Cannot update item to associate with a null id\");\n                }\n                if (idxById[newId] !== undefined) {\n                    throw new Error(\"Cannot update item to associate with a non-unique id\");\n                }\n                idxById[newId] = idxById[id];\n                delete idxById[id];\n\n                if (updated && updated[id]) {\n                    delete updated[id];\n                }\n\n                id = newId;\n            }\n            items[idxById[id]] = item;\n\n            if (!updated) {\n                updated = {};\n            }\n            updated[id] = true;\n            refresh();\n        }\n\n        function insertItem(insertBefore: number, item: any) {\n            items.splice(insertBefore, 0, item);\n            updateIdxById(insertBefore);\n            refresh();\n        }\n\n        function addItem(item: any) {\n            items.push(item);\n            updateIdxById(items.length - 1);\n            refresh();\n        }\n\n        function deleteItem(id: any) {\n            var idx = idxById[id];\n            if (idx === undefined) {\n                throw \"Invalid id\";\n            }\n            delete idxById[id];\n            items.splice(idx, 1);\n            updateIdxById(idx);\n            refresh();\n        }\n\n        function sortedAddItem(item: any) {\n            insertItem(sortedIndex(item), item);\n        }\n\n        function sortedUpdateItem(id: any, item: any) {\n            if (idxById[id] === undefined || id !== item[idProperty]) {\n                throw new Error(\"Invalid or non-matching id \" + idxById[id]);\n            }\n            var comparer = getSortComparer();\n            var oldItem = getItemById(id);\n            if (comparer(oldItem, item) !== 0) {\n                // item affects sorting -> must use sorted add\n                deleteItem(id);\n                sortedAddItem(item);\n            }\n            else { // update does not affect sorting -> regular update works fine\n                updateItem(id, item);\n            }\n        }\n\n        function sortedIndex(searchItem: any) {\n            var low = 0, high = items.length;\n            var comparer = getSortComparer();\n            while (low < high) {\n                var mid = low + high >>> 1;\n                if (comparer(items[mid], searchItem) === -1) {\n                    low = mid + 1;\n                }\n                else {\n                    high = mid;\n                }\n            }\n            return low;\n        }\n\n        function getRows() {\n            return rows;\n        }\n\n        function getLength() {\n            return rows.length;\n        }\n\n        function getItem(i: number) {\n            var item = rows[i];\n\n            // if this is a group row, make sure totals are calculated and update the title\n            if (item && item.__group && item.totals && !item.totals.initialized) {\n                var gi = groupingInfos[item.level];\n                if (!gi.displayTotalsRow) {\n                    calculateTotals(item.totals);\n                    item.title = gi.formatter ? gi.formatter(item) : htmlEncode(item.value);\n                }\n            }\n            // if this is a totals row, make sure it's calculated\n            else if (item && item.__groupTotals && !item.initialized) {\n                calculateTotals(item);\n            }\n\n            return item;\n        }\n\n        function getItemMetadata(i: number) {\n            var item = rows[i];\n            if (item === undefined) {\n                return null;\n            }\n\n            // overrides for grouping rows\n            if (item.__group) {\n                return groupItemMetadataProvider.getGroupRowMetadata(item);\n            }\n\n            // overrides for totals rows\n            if (item.__groupTotals) {\n                return groupItemMetadataProvider.getTotalsRowMetadata(item);\n            }\n\n            return (options.getItemMetadata && options.getItemMetadata(item, i)) || null;\n        }\n\n        function expandCollapseAllGroups(level: number, collapse: boolean) {\n            if (level == null) {\n                for (var i = 0; i < groupingInfos.length; i++) {\n                    toggledGroupsByLevel[i] = {};\n                    groupingInfos[i].collapsed = collapse;\n\n                    if (collapse === true) {\n                        onGroupCollapsed.notify({ level: i, groupingKey: null });\n                    } else {\n                        onGroupExpanded.notify({ level: i, groupingKey: null });\n                    }\n                }\n            } else {\n                toggledGroupsByLevel[level] = {};\n                groupingInfos[level].collapsed = collapse;\n\n                if (collapse === true) {\n                    onGroupCollapsed.notify({ level: level, groupingKey: null });\n                } else {\n                    onGroupExpanded.notify({ level: level, groupingKey: null });\n                }\n            }\n            refresh();\n        }\n\n        /**\n         * @param level {Number} Optional level to collapse.  If not specified, applies to all levels.\n         */\n        function collapseAllGroups(level: number) {\n            expandCollapseAllGroups(level, true);\n        }\n\n        /**\n         * @param level {Number} Optional level to expand.  If not specified, applies to all levels.\n         */\n        function expandAllGroups(level: number) {\n            expandCollapseAllGroups(level, false);\n        }\n\n        function resolveLevelAndGroupingKey(args: any) {\n            var arg0 = args[0];\n            if (args.length === 1 && arg0.indexOf(groupingDelimiter) !== -1) {\n                return { level: arg0.split(groupingDelimiter).length - 1, groupingKey: arg0 };\n            } else {\n                return { level: args.length - 1, groupingKey: args.join(groupingDelimiter) };\n            }\n        }\n\n        function expandCollapseGroup(args: any, collapse: any) {\n            var opts = resolveLevelAndGroupingKey(args);\n            toggledGroupsByLevel[opts.level][opts.groupingKey] = groupingInfos[opts.level].collapsed ^ collapse;\n            if (collapse)\n                onGroupCollapsed.notify({ level: opts.level, groupingKey: opts.groupingKey });\n            else\n                onGroupExpanded.notify({ level: opts.level, groupingKey: opts.groupingKey });\n\n            refresh();\n        }\n\n        /**\n         * @param varArgs Either a Slick.Group's \"groupingKey\" property, or a\n         *     variable argument list of grouping values denoting a unique path to the row.  For\n         *     example, calling collapseGroup('high', '10%') will collapse the '10%' subgroup of\n         *     the 'high' group.\n         */\n        function collapseGroup(varArgs: any[]) {\n            var args = Array.prototype.slice.call(arguments);\n            expandCollapseGroup(args, true);\n        }\n\n        /**\n         * @param varArgs Either a Slick.Group's \"groupingKey\" property, or a\n         *     variable argument list of grouping values denoting a unique path to the row.  For\n         *     example, calling expandGroup('high', '10%') will expand the '10%' subgroup of\n         *     the 'high' group.\n         */\n        function expandGroup(varArgs: any[]) {\n            var args = Array.prototype.slice.call(arguments);\n            expandCollapseGroup(args, false);\n        }\n\n        function getGroups() {\n            return groups;\n        }\n\n        function getOrCreateGroup(groupsByVal: any, val: any, level: number, parentGroup: any, groups: any[]) {\n            var group = groupsByVal[val];\n\n            if (!group) {\n                group = new Group<any>();\n                group.value = val;\n                group.level = level;\n                group.groupingKey = (parentGroup ? parentGroup.groupingKey + groupingDelimiter : '') + val;\n                groups[groups.length] = group;\n                groupsByVal[val] = group;\n            }\n\n            return group;\n        }\n\n        function extractGroups(rows: any[], parentGroup?: any) {\n            var group: any;\n            var val: any;\n            var groups: any[] = [];\n            var groupsByVal = {};\n            var r: any;\n            var level = parentGroup ? parentGroup.level + 1 : 0;\n            var gi = groupingInfos[level];\n\n            for (var i = 0, l: number = gi.predefinedValues.length; i < l; i++) {\n                val = gi.predefinedValues[i];\n                group = getOrCreateGroup(groupsByVal, val, level, parentGroup, groups);\n            }\n\n            for (var i = 0, l = rows.length; i < l; i++) {\n                r = rows[i];\n                val = gi.getterIsAFn ? gi.getter(r) : r[gi.getter];\n                group = getOrCreateGroup(groupsByVal, val, level, parentGroup, groups);\n\n                group.rows[group.count++] = r;\n            }\n\n            if (level < groupingInfos.length - 1) {\n                for (var i = 0; i < groups.length; i++) {\n                    group = groups[i];\n                    group.groups = extractGroups(group.rows, group);\n                }\n            }\n\n            if (groups.length) {\n                addTotals(groups, level);\n            }\n\n            groups.sort(groupingInfos[level].comparer);\n\n            return groups;\n        }\n\n        function calculateTotals(totals: any) {\n            var group = totals.group;\n            var gi = groupingInfos[group.level];\n            var isLeafLevel = (group.level == groupingInfos.length);\n            var agg: any, idx = gi.aggregators.length;\n\n            if (!isLeafLevel && gi.aggregateChildGroups) {\n                // make sure all the subgroups are calculated\n                var i = group.groups.length;\n                while (i--) {\n                    if (!group.groups[i].totals.initialized) {\n                        calculateTotals(group.groups[i].totals);\n                    }\n                }\n            }\n\n            while (idx--) {\n                agg = gi.aggregators[idx];\n                agg.init();\n                if (!isLeafLevel && gi.aggregateChildGroups) {\n                    gi.compiledAccumulators[idx].call(agg, group.groups);\n                } else {\n                    gi.compiledAccumulators[idx].call(agg, group.rows);\n                }\n                agg.storeResult(totals);\n            }\n            totals.initialized = true;\n        }\n\n        function addGroupTotals(group: any) {\n            var gi = groupingInfos[group.level];\n            var totals = new GroupTotals<TEntity>();\n            totals.group = group;\n            group.totals = totals;\n            if (!gi.lazyTotalsCalculation) {\n                calculateTotals(totals);\n            }\n        }\n\n        function addTotals(groups: any[], level?: number) {\n            level = level || 0;\n            var gi = groupingInfos[level];\n            var groupCollapsed = gi.collapsed;\n            var toggledGroups = toggledGroupsByLevel[level];\n            var idx = groups.length, g: any;\n            while (idx--) {\n                g = groups[idx];\n\n                if (g.collapsed && !gi.aggregateCollapsed) {\n                    continue;\n                }\n\n                // Do a depth-first aggregation so that parent group aggregators can access subgroup totals.\n                if (g.groups) {\n                    addTotals(g.groups, level + 1);\n                }\n\n                if (gi.aggregators.length && (\n                    gi.aggregateEmpty || g.rows.length || (g.groups && g.groups.length))) {\n                    addGroupTotals(g);\n                }\n\n                g.collapsed = groupCollapsed ^ toggledGroups[g.groupingKey];\n                g.title = gi.formatter ? gi.formatter(g) : htmlEncode(g.value);\n            }\n        }\n\n        function flattenGroupedRows(groups: any[], level?: number) {\n            level = level || 0;\n            var gi = groupingInfos[level];\n            var groupedRows: any[] = [], rows: any[], gl = 0, g: any;\n            for (var i = 0, l = groups.length; i < l; i++) {\n                g = groups[i];\n                groupedRows[gl++] = g;\n\n                if (!g.collapsed) {\n                    rows = g.groups ? flattenGroupedRows(g.groups, level + 1) : g.rows;\n                    for (var j = 0, jj = rows.length; j < jj; j++) {\n                        groupedRows[gl++] = rows[j];\n                    }\n                }\n\n                if (g.totals && gi.displayTotalsRow && (!g.collapsed || gi.aggregateCollapsed)) {\n                    groupedRows[gl++] = g.totals;\n                }\n            }\n            return groupedRows;\n        }\n\n        function getFunctionInfo(fn: any) {\n            var fnRegex = /^function[^(]*\\(([^)]*)\\)\\s*{([\\s\\S]*)}$/;\n            var matches = fn.toString().match(fnRegex);\n            return {\n                params: matches[1].split(\",\"),\n                body: matches[2]\n            };\n        }\n\n        function compileAccumulatorLoop(aggregator: any) {\n            var accumulatorInfo = getFunctionInfo(aggregator.accumulate);\n            var fn: any = new Function(\n                \"_items\",\n                \"for (var \" + accumulatorInfo.params[0] + \", _i=0, _il=_items.length; _i<_il; _i++) {\" +\n                accumulatorInfo.params[0] + \" = _items[_i]; \" +\n                accumulatorInfo.body +\n                \"}\"\n            );\n            return fn;\n        }\n\n        function compileFilter() {\n            var filterInfo = getFunctionInfo(filter);\n\n            var filterBody = filterInfo.body\n                .replace(/return false\\s*([;}]|$)/gi, \"{ continue _coreloop; }$1\")\n                .replace(/return true\\s*([;}]|$)/gi, \"{ _retval[_idx++] = $item$; continue _coreloop; }$1\")\n                .replace(/return ([^;}]+?)\\s*([;}]|$)/gi,\n                \"{ if ($1) { _retval[_idx++] = $item$; }; continue _coreloop; }$2\");\n\n            // This preserves the function template code after JS compression,\n            // so that replace() commands still work as expected.\n            var tpl = [\n                //\"function(_items, _args) { \",\n                \"var _retval = [], _idx = 0; \",\n                \"var $item$, $args$ = _args; \",\n                \"_coreloop: \",\n                \"for (var _i = 0, _il = _items.length; _i < _il; _i++) { \",\n                \"$item$ = _items[_i]; \",\n                \"$filter$; \",\n                \"} \",\n                \"return _retval; \"\n                //\"}\"\n            ].join(\"\");\n            tpl = tpl.replace(/\\$filter\\$/gi, filterBody);\n            tpl = tpl.replace(/\\$item\\$/gi, filterInfo.params[0]);\n            tpl = tpl.replace(/\\$args\\$/gi, filterInfo.params[1]);\n\n            var fn: any = new Function(\"_items,_args\", tpl);\n            fn.displayName = fn.name = \"compiledFilter\";\n            return fn;\n        }\n\n        function compileFilterWithCaching() {\n            var filterInfo = getFunctionInfo(filter);\n\n            var filterBody = filterInfo.body\n                .replace(/return false\\s*([;}]|$)/gi, \"{ continue _coreloop; }$1\")\n                .replace(/return true\\s*([;}]|$)/gi, \"{ _cache[_i] = true;_retval[_idx++] = $item$; continue _coreloop; }$1\")\n                .replace(/return ([^;}]+?)\\s*([;}]|$)/gi,\n                \"{ if ((_cache[_i] = $1)) { _retval[_idx++] = $item$; }; continue _coreloop; }$2\");\n\n            // This preserves the function template code after JS compression,\n            // so that replace() commands still work as expected.\n            var tpl = [\n                //\"function(_items, _args, _cache) { \",\n                \"var _retval = [], _idx = 0; \",\n                \"var $item$, $args$ = _args; \",\n                \"_coreloop: \",\n                \"for (var _i = 0, _il = _items.length; _i < _il; _i++) { \",\n                \"$item$ = _items[_i]; \",\n                \"if (_cache[_i]) { \",\n                \"_retval[_idx++] = $item$; \",\n                \"continue _coreloop; \",\n                \"} \",\n                \"$filter$; \",\n                \"} \",\n                \"return _retval; \"\n                //\"}\"\n            ].join(\"\");\n            tpl = tpl.replace(/\\$filter\\$/gi, filterBody);\n            tpl = tpl.replace(/\\$item\\$/gi, filterInfo.params[0]);\n            tpl = tpl.replace(/\\$args\\$/gi, filterInfo.params[1]);\n\n            var fn: any = new Function(\"_items,_args,_cache\", tpl);\n            var fnName = \"compiledFilterWithCaching\";\n            fn.displayName = fnName;\n            fn.name = setFunctionName(fn, fnName);\n            return fn;\n        }\n\n        /**\n         * In ES5 we could set the function name on the fly but in ES6 this is forbidden and we need to set it through differently\n         * We can use Object.defineProperty and set it the property to writable, see MDN for reference\n         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n         * @param {string} fn\n         * @param {string} fnName\n         */\n        function setFunctionName(fn: Function, fnName: string) {\n            try {\n                Object.defineProperty(fn, 'name', {\n                    writable: true,\n                    value: fnName\n                });\n            } catch (err) {\n                (fn as any).name = fnName;\n            }\n        }\n\n        function uncompiledFilter(items: any[], args: any) {\n            var retval: any[] = [], idx = 0;\n\n            for (var i = 0, ii = items.length; i < ii; i++) {\n                if (filter(items[i], args)) {\n                    retval[idx++] = items[i];\n                }\n            }\n\n            return retval;\n        }\n\n        function uncompiledFilterWithCaching(items: any[], args: any, cache: any) {\n            var retval: any[] = [], idx = 0, item: any;\n\n            for (var i = 0, ii = items.length; i < ii; i++) {\n                item = items[i];\n                if (cache[i]) {\n                    retval[idx++] = item;\n                } else if (filter(item, args)) {\n                    retval[idx++] = item;\n                    cache[i] = true;\n                }\n            }\n\n            return retval;\n        }\n\n        function getFilteredAndPagedItems(items: any[]) {\n            if (filter) {\n                var batchFilter = options.inlineFilters ? compiledFilter : uncompiledFilter;\n                var batchFilterWithCaching = options.inlineFilters ? compiledFilterWithCaching : uncompiledFilterWithCaching;\n\n                if (refreshHints.isFilterNarrowing) {\n                    filteredItems = batchFilter(filteredItems, filterArgs);\n                } else if (refreshHints.isFilterExpanding) {\n                    filteredItems = batchFilterWithCaching(items, filterArgs, filterCache);\n                } else if (!refreshHints.isFilterUnchanged) {\n                    filteredItems = batchFilter(items, filterArgs);\n                }\n            } else {\n                // special case:  if not filtering and not paging, the resulting\n                // rows collection needs to be a copy so that changes due to sort\n                // can be caught\n                filteredItems = items.concat();\n            }\n\n            // get the current page\n            return { totalRows: filteredItems.length, rows: filteredItems };\n        }\n\n        function getRowDiffs(rows: any[], newRows: any[]) {\n            var item: any, r: any, eitherIsNonData: boolean, diff: any[] = [];\n            var from = 0, to = newRows.length;\n\n            if (refreshHints && refreshHints.ignoreDiffsBefore) {\n                from = Math.max(0,\n                    Math.min(newRows.length, refreshHints.ignoreDiffsBefore));\n            }\n\n            if (refreshHints && refreshHints.ignoreDiffsAfter) {\n                to = Math.min(newRows.length,\n                    Math.max(0, refreshHints.ignoreDiffsAfter));\n            }\n\n            for (var i = from, rl = rows.length; i < to; i++) {\n                if (i >= rl) {\n                    diff[diff.length] = i;\n                } else {\n                    item = newRows[i];\n                    r = rows[i];\n\n                    if ((groupingInfos.length && (eitherIsNonData = (item.__nonDataRow) || (r.__nonDataRow)) &&\n                        item.__group !== r.__group ||\n                        item.__group && !item.equals(r))\n                        || (eitherIsNonData &&\n                            // no good way to compare totals since they are arbitrary DTOs\n                            // deep object comparison is pretty expensive\n                            // always considering them 'dirty' seems easier for the time being\n                            (item.__groupTotals || r.__groupTotals))\n                        || item[idProperty] != r[idProperty]\n                        || (updated && updated[item[idProperty]])\n                    ) {\n                        diff[diff.length] = i;\n                    }\n                }\n            }\n            return diff;\n        }\n\n        function recalc(_items: any[]) {\n            rowsById = null;\n\n            if (refreshHints.isFilterNarrowing != prevRefreshHints.isFilterNarrowing ||\n                refreshHints.isFilterExpanding != prevRefreshHints.isFilterExpanding) {\n                filterCache = [];\n            }\n\n            var filteredItems = getFilteredAndPagedItems(_items);\n            totalRows = filteredItems.totalRows;\n            var newRows = filteredItems.rows;\n\n            summaryOptions.totals = {};\n\n            groups = [];\n            if (groupingInfos.length) {\n                groups = extractGroups(newRows);\n                if (groups.length) {\n                    newRows = flattenGroupedRows(groups);\n                }\n            }\n\n            var diff = getRowDiffs(rows, newRows);\n\n            rows = newRows;\n\n            return diff;\n        }\n\n        function refresh() {\n            if (suspend) {\n                return;\n            }\n\n            var countBefore = rows.length;\n            var totalRowsBefore = totalRows;\n\n            var diff = recalc(items); // pass as direct refs to avoid closure perf hit\n\n            updated = null;\n            prevRefreshHints = refreshHints;\n            refreshHints = {};\n\n            if (totalRowsBefore !== totalRows) {\n                onPagingInfoChanged.notify(getPagingInfo(), null, self);\n            }\n            if (countBefore !== rows.length) {\n                onRowCountChanged.notify({ previous: countBefore, current: rows.length, dataView: self }, null, self);\n            }\n            if (diff.length > 0) {\n                onRowsChanged.notify({ rows: diff, dataView: self }, null, self);\n            }\n            if (countBefore !== rows.length || diff.length > 0) {\n                onRowsOrCountChanged.notify({\n                    rowsDiff: diff, previousRowCount: countBefore, currentRowCount: rows.length,\n                    rowCountChanged: countBefore !== rows.length, rowsChanged: diff.length > 0, dataView: self\n                }, null, self);\n            }\n        }\n\n        /***\n         * Wires the grid and the DataView together to keep row selection tied to item ids.\n         * This is useful since, without it, the grid only knows about rows, so if the items\n         * move around, the same rows stay selected instead of the selection moving along\n         * with the items.\n         *\n         * NOTE:  This doesn't work with cell selection model.\n         *\n         * @param grid {Slick.Grid} The grid to sync selection with.\n         * @param preserveHidden {Boolean} Whether to keep selected items that go out of the\n         *     view due to them getting filtered out.\n         * @param preserveHiddenOnSelectionChange {Boolean} Whether to keep selected items\n         *     that are currently out of the view (see preserveHidden) as selected when selection\n         *     changes.\n         * @return {EventEmitter} An event that notifies when an internal list of selected row ids\n         *     changes.  This is useful since, in combination with the above two options, it allows\n         *     access to the full list selected row ids, and not just the ones visible to the grid.\n         * @method syncGridSelection\n         */\n        function syncGridSelection(grid: any, preserveHidden: boolean, preserveHiddenOnSelectionChange: boolean) {\n            var self = this;\n            var inHandler: any;\n            var selectedRowIds = self.mapRowsToIds(grid.getSelectedRows());\n            var onSelectedRowIdsChanged = new EventEmitter();\n\n            function setSelectedRowIds(rowIds: any[]) {\n                if (selectedRowIds.join(\",\") == rowIds.join(\",\")) {\n                    return;\n                }\n\n                selectedRowIds = rowIds;\n\n                onSelectedRowIdsChanged.notify({\n                    \"grid\": grid,\n                    \"ids\": selectedRowIds,\n                    \"dataView\": self\n                }, new EventData(), self);\n            }\n\n            function update() {\n                if (selectedRowIds.length > 0) {\n                    inHandler = true;\n                    var selectedRows = self.mapIdsToRows(selectedRowIds);\n                    if (!preserveHidden) {\n                        setSelectedRowIds(self.mapRowsToIds(selectedRows));\n                    }\n                    grid.setSelectedRows(selectedRows);\n                    inHandler = false;\n                }\n            }\n\n            grid.onSelectedRowsChanged.subscribe(function (e: any, args: any) {\n                if (inHandler) { return; }\n                var newSelectedRowIds = self.mapRowsToIds(grid.getSelectedRows());\n                if (!preserveHiddenOnSelectionChange || !grid.getOptions().multiSelect) {\n                    setSelectedRowIds(newSelectedRowIds);\n                } else {\n                    // keep the ones that are hidden\n                    var existing = $.grep(selectedRowIds, function (id) { return self.getRowById(id) === undefined; });\n                    // add the newly selected ones\n                    setSelectedRowIds(existing.concat(newSelectedRowIds));\n                }\n            });\n\n            this.onRowsChanged.subscribe(update);\n            this.onRowCountChanged.subscribe(update);\n\n            return onSelectedRowIdsChanged;\n        }\n\n        function syncGridCellCssStyles(grid: Grid, key: string) {\n            var hashById: any;\n            var inHandler: any;\n\n            // since this method can be called after the cell styles have been set,\n            // get the existing ones right away\n            storeCellCssStyles(grid.getCellCssStyles(key));\n\n            function storeCellCssStyles(hash: any) {\n                hashById = {};\n                for (var row in hash) {\n                    var id: any = (rows as any)[row][idProperty];\n                    hashById[id] = hash[row];\n                }   \n            }\n\n            function update() {\n                if (hashById) {\n                    inHandler = true;\n                    ensureRowsByIdCache();\n                    var newHash: Record<number, any> = {};\n                    for (var id in hashById) {\n                        var row = rowsById[id];\n                        if (row != undefined) {\n                            newHash[row] = hashById[id];\n                        }\n                    }\n                    grid.setCellCssStyles(key, newHash);\n                    inHandler = false;\n                }\n            }\n\n            var subFunc = function (e: any, args: any) {\n                if (inHandler) { return; }\n                if (key != args.key) { return; }\n                if (args.hash) {\n                    storeCellCssStyles(args.hash);\n                }\n                else {\n                    grid.onCellCssStylesChanged.unsubscribe(subFunc);\n                    onRowsOrCountChanged.unsubscribe(update);\n                }\n            };\n\n            grid.onCellCssStylesChanged.subscribe(subFunc);\n            onRowsOrCountChanged.subscribe(update);\n        }\n\n        function addData(data: any) {\n\n            if (intf.onProcessData && data)\n                data = intf.onProcessData(data, intf) || data;\n\n            errorMessage = null;\n            loading && loading.abort();\n            loading = false;\n\n            if (!data) {\n                errorMessage = intf.errormsg;\n                onPagingInfoChanged.notify(getPagingInfo());\n                return false;\n            }\n\n            data.TotalCount = data.TotalCount || 0;\n            data.Entities = data.Entities || [];\n\n            if (!data.Skip || (!intf.rowsPerPage && !data.Take))\n                data.Page = 1;\n            else\n                data.Page = Math.ceil(data.Skip / (data.Take || intf.rowsPerPage)) + 1;\n\n            page = data.Page;\n            totalCount = data.TotalCount;\n\n            setItems(data.Entities);\n\n            onPagingInfoChanged.notify(getPagingInfo());\n        }\n\n        function populate() {\n            if (populateLocks > 0) {\n                populateCalls++;\n                return;\n            }\n\n            populateCalls = 0;\n\n            loading && loading.abort();\n\n            if (intf.onSubmit) {\n                var gh = intf.onSubmit(intf);\n                if (gh === false)\n                    return false;\n            }\n\n            onDataLoading.notify(this);\n\n            if (!intf.url)\n                return false;\n\n            // set loading event\n        \n            if (!intf.seekToPage)\n                intf.seekToPage = 1;\n\n            var request: ListRequest = {};\n\n            var skip = (intf.seekToPage - 1) * intf.rowsPerPage;\n            if (skip)\n                request.Skip = skip;\n            if (intf.rowsPerPage)\n                request.Take = intf.rowsPerPage;\n\n            if (intf.sortBy && intf.sortBy.length) {\n                if (typeof intf.sortBy !== \"string\")\n                    request.Sort = intf.sortBy;\n                else {\n                    request.Sort = [intf.sortBy];\n                }\n            }\n\n            if (intf.params) {\n                request = extend(request, intf.params);\n            }\n\n            var dt = dataType;\n\n            var ajaxOptions = {\n                cache: false,\n                type: intf.method,\n                contentType: contentType,\n                url: intf.url,\n                data: request,\n                dataType: dt,\n                success: function (response: ServiceResponse) {\n                    loading = false;\n                    if (response.Error)\n                        notifyError(response.Error.Message || response.Error.Code);\n                    else\n                        addData(response);\n                    onDataLoaded.notify(this);\n                },\n                error: function (xhr: any, status: any, ev: any) {\n                    loading = false;\n\n                    if ((xhr.getResponseHeader(\"content-type\") || '').toLowerCase().indexOf(\"application/json\") >= 0) {\n                        var json = $.parseJSON(xhr.responseText);\n                        if (json != null && json.Error != null) {\n                            notifyError(json.Error.Message || json.Error.Code);\n                            onPagingInfoChanged.notify(getPagingInfo());\n                            onDataLoaded.notify(this);\n                            return;\n                        }\n                    }\n\n                    errorMessage = xhr.errormsg;\n                    onPagingInfoChanged.notify(getPagingInfo());\n                    onDataLoaded.notify(this);\n                },\n                complete: function () {\n                    loading = false;\n                }\n            }\n\n            if (intf.onAjaxCall) {\n                var ah = intf.onAjaxCall(this, ajaxOptions);\n                if (ah === false) {\n                    loading = false;\n                    onPagingInfoChanged.notify(getPagingInfo());\n                    return false;\n                }\n            }\n\n            ajaxOptions.data = (<any>$).toJSON(ajaxOptions.data);\n\n            onPagingInfoChanged.notify(getPagingInfo());\n            loading = $.ajax(ajaxOptions);\n        }\n\n        function populateLock() {\n            if (populateLocks == 0)\n                populateCalls = 0;\n            populateLocks++;\n        }\n\n        function populateUnlock() {\n            if (populateLocks > 0) {\n                populateLocks--;\n                if (populateLocks == 0 && populateCalls > 0)\n                    populate();\n            }\n        }\n\n        function getGroupItemMetadataProvider() {\n            return groupItemMetadataProvider;\n        }\n\n        function setGroupItemMetadataProvider(value: GroupItemMetadataProvider) {\n            groupItemMetadataProvider = value;\n        }\n\n        idProperty = options.idField || 'id';\n        contentType = options.contentType || \"application/json\";\n        dataType = options.dataType || 'json';\n        filter = options.filter || null;\n\n        intf = {\n            // methods\n            beginUpdate: beginUpdate,\n            endUpdate: endUpdate,\n            setPagingOptions: setPagingOptions,\n            getPagingInfo: getPagingInfo,\n            getIdPropertyName: getIdPropertyName,\n            getRows: getRows,\n            getItems: getItems,\n            setItems: setItems,\n            getFilter: getFilter,\n            getFilteredItems: getFilteredItems,\n            setFilter: setFilter,\n            sort: sort,\n            fastSort: fastSort,\n            reSort: reSort,\n            getLocalSort: getLocalSort,\n            setLocalSort: setLocalSort,\n            setSummaryOptions: setSummaryOptions,\n            getGrandTotals: getGrandTotals,\n            setGrouping: setGrouping,\n            getGrouping: getGrouping,\n            collapseAllGroups: collapseAllGroups,\n            expandAllGroups: expandAllGroups,\n            collapseGroup: collapseGroup,\n            expandGroup: expandGroup,\n            getGroups: getGroups,\n            getIdxById: getIdxById,\n            getRowByItem: getRowByItem,\n            getRowById: getRowById,\n            getItemById: getItemById,\n            getItemByIdx: getItemByIdx,\n            mapItemsToRows: mapItemsToRows,\n            mapRowsToIds: mapRowsToIds,\n            mapIdsToRows: mapIdsToRows,\n            setRefreshHints: setRefreshHints,\n            setFilterArgs: setFilterArgs,\n            refresh: refresh,\n            updateItem: updateItem,\n            insertItem: insertItem,\n            addItem: addItem,\n            deleteItem: deleteItem,\n            sortedAddItem: sortedAddItem,\n            sortedUpdateItem: sortedUpdateItem,\n            syncGridSelection: syncGridSelection,\n            syncGridCellCssStyles: syncGridCellCssStyles,\n\n            getLength: getLength,\n            getItem: getItem,\n            getItemMetadata: getItemMetadata,\n            getGroupItemMetadataProvider: getGroupItemMetadataProvider,\n            setGroupItemMetadataProvider: setGroupItemMetadataProvider,\n\n            onRowCountChanged: onRowCountChanged,\n            onRowsChanged: onRowsChanged,\n            onRowsOrCountChanged: onRowsOrCountChanged,\n            onPagingInfoChanged: onPagingInfoChanged,\n            onGroupExpanded: onGroupExpanded,\n            onGroupCollapsed: onGroupCollapsed,\n\n            addData: addData,\n            populate: populate,\n            populateLock: populateLock,\n            populateUnlock: populateUnlock,\n            onDataChanged: onDataChanged,\n            onDataLoaded: onDataLoaded,\n            onDataLoading: onDataLoading,\n            params: options.params || {},\n            onSubmit: options.onSubmit || null,\n            url: options.url || null,\n            rowsPerPage: options.rowsPerPage || 0,\n            seekToPage: options.seekToPage || 1,\n            onAjaxCall: options.onAjaxCall || null,\n            onProcessData: options.onProcessData || null,\n            method: options.method || \"POST\",\n            errormsg: localText(\"Controls.Pager.DefaultLoadError\"),\n            sortBy: typeof options.sortBy == \"string\" ? [options.sortBy] : (options.sortBy || []),\n            idField: idProperty\n        };\n\n        if (options.url && options.autoLoad) {\n            populate();\n        }\n\n        return intf;\n    }\n}\n"],
  "mappings": "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",
  "names": ["escape", "NonDataRow", "convertCompatFormatter", "formatNumber", "htmlEncode", "tryGetText", "Aggregators", "Avg", "field", "item", "val", "groupTotals", "WeightedAvg", "weightedField", "valWeighted", "Min", "Max", "Sum", "AggregateFormatting", "formatMarkup", "totals", "column", "aggType", "_a", "textKey", "text", "tryGetText", "value", "formattedValue", "formatValue", "htmlEncode", "_b", "_c", "formatter", "convertCompatFormatter", "NonDataRow", "escape", "e", "displayFormat", "formatNumber", "groupTotalsFormatter", "deepClone", "extend", "htmlEncode", "notifyError", "localText", "EventEmitter", "EventData", "gridDefaults", "Group", "GroupItemMetadataProvider", "GroupTotals", "RemoteView", "options", "_a", "self", "gridDefaults", "AggregateFormatting", "idProperty", "items", "rows", "idxById", "rowsById", "filter", "updated", "suspend", "sortAsc", "fastSortField", "sortComparer", "refreshHints", "prevRefreshHints", "filterArgs", "filteredItems", "compiledFilter", "compiledFilterWithCaching", "filterCache", "groupingInfoDefaults", "a", "b", "summaryOptions", "groupingInfos", "groups", "toggledGroupsByLevel", "groupingDelimiter", "page", "totalRows", "onDataChanged", "EventEmitter", "onDataLoading", "onDataLoaded", "onGroupExpanded", "onGroupCollapsed", "onPagingInfoChanged", "onRowCountChanged", "onRowsChanged", "onRowsOrCountChanged", "loading", "errorMessage", "populateLocks", "populateCalls", "contentType", "dataType", "totalCount", "groupItemMetadataProvider", "localSort", "intf", "beginUpdate", "endUpdate", "refresh", "setRefreshHints", "hints", "setFilterArgs", "args", "updateIdxById", "startingIndex", "id", "i", "l", "msg", "ensureIdUniqueness", "getItems", "getIdPropertyName", "setItems", "data", "newIdProperty", "getSortComparer", "recalc", "setPagingOptions", "anyChange", "newPage", "populate", "getPagingInfo", "cols", "asc", "sorts", "s", "field", "sign", "value1", "value2", "result", "sort", "comparer", "ascending", "getLocalSort", "setLocalSort", "value", "fastSort", "oldToString", "reSort", "getFilteredItems", "getFilter", "setFilter", "filterFn", "compileFilter", "compileFilterWithCaching", "getGrouping", "setSummaryOptions", "summary", "idx", "compileAccumulatorLoop", "setGrouping", "getGrandTotals", "agg", "groupingInfo", "GroupItemMetadataProvider", "gi", "extend", "deepClone", "getItemByIdx", "getIdxById", "ensureRowsByIdCache", "getRowByItem", "item", "getRowById", "getItemById", "mapItemsToRows", "itemArray", "row", "mapIdsToRows", "idArray", "mapRowsToIds", "rowArray", "ids", "updateItem", "newId", "insertItem", "insertBefore", "addItem", "deleteItem", "sortedAddItem", "sortedIndex", "sortedUpdateItem", "oldItem", "searchItem", "low", "high", "mid", "getRows", "getLength", "getItem", "calculateTotals", "htmlEncode", "getItemMetadata", "expandCollapseAllGroups", "level", "collapse", "collapseAllGroups", "expandAllGroups", "resolveLevelAndGroupingKey", "arg0", "expandCollapseGroup", "opts", "collapseGroup", "varArgs", "expandGroup", "getGroups", "getOrCreateGroup", "groupsByVal", "val", "parentGroup", "group", "Group", "extractGroups", "r", "addTotals", "totals", "isLeafLevel", "addGroupTotals", "GroupTotals", "groupCollapsed", "toggledGroups", "g", "flattenGroupedRows", "groupedRows", "gl", "j", "jj", "getFunctionInfo", "fn", "fnRegex", "matches", "aggregator", "accumulatorInfo", "filterInfo", "filterBody", "tpl", "fnName", "setFunctionName", "err", "uncompiledFilter", "retval", "ii", "uncompiledFilterWithCaching", "cache", "getFilteredAndPagedItems", "batchFilter", "batchFilterWithCaching", "getRowDiffs", "newRows", "eitherIsNonData", "diff", "from", "to", "rl", "_items", "countBefore", "totalRowsBefore", "syncGridSelection", "grid", "preserveHidden", "preserveHiddenOnSelectionChange", "inHandler", "selectedRowIds", "onSelectedRowIdsChanged", "setSelectedRowIds", "rowIds", "EventData", "update", "selectedRows", "e", "newSelectedRowIds", "existing", "syncGridCellCssStyles", "key", "hashById", "storeCellCssStyles", "hash", "newHash", "subFunc", "addData", "gh", "request", "skip", "dt", "ajaxOptions", "response", "notifyError", "xhr", "status", "ev", "json", "ah", "populateLock", "populateUnlock", "getGroupItemMetadataProvider", "setGroupItemMetadataProvider", "localText"]
}
